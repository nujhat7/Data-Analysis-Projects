%%sql
postgresql:///games

-- Select all information for the top ten best-selling games
-- Order the results from best-selling game down to tenth best-selling

SELECT * FROM game_sales Order by games_sold desc  LIMIT 10

--Missing review scores
%%sql
postgresql:///games


-- Join games_sales and reviews
-- Select a count of the number of games where both critic_score and user_score are null
select count(*) from game_sales as g 
left join reviews as r on g.game=r.game
where r.critic_score is null AND r.user_score is null

%%sql
postgresql:///games


-- Select release year and average critic score for each year, rounded and aliased
-- Join the game_sales and reviews tables
-- Group by release year
-- Order the data from highest to lowest avg_critic_score and limit to 10 results

Select year, round(avg(critic_score),2) as avg_critic_score
from game_sales as g 
left join reviews as r on g.game=r.game
group By year
Order by round(avg(critic_score),2) Desc
Limit 10

%%sql
postgresql:///games


-- Select release year and average critic score for each year, rounded and aliased
-- Join the game_sales and reviews tables
-- Group by release year
-- Order the data from highest to lowest avg_critic_score and limit to 10 results

Select year, round(avg(critic_score),2) as avg_critic_score
from game_sales as g 
left join reviews as r on g.game=r.game
group By year
Order by round(avg(critic_score),2) Desc
Limit 10

%%sql 

-- Select the year and avg_critic_score for those years that dropped off the list of critic favorites 
-- Order the results from highest to lowest avg_critic_score

SELECT year, avg_critic_score
FROM top_critic_years
EXCEPT
SELECT year, avg_critic_score
FROM top_critic_years_more_than_four_games
ORDER BY avg_critic_score DESC;

%%sql 

-- Select year, an average of user_score, and a count of games released in a given year, aliased and rounded
-- Include only years with more than four reviewed games; group data by year
-- Order data by avg_user_score, and limit to ten results

Select g.year, COUNT(g.game) AS num_games,round(avg(r.user_score),2) as avg_user_score
from game_sales as g 
INNER join reviews as r on g.game=r.game
group By g.year
having count (g.game)>4
Order by round(avg(user_score),2) Desc
Limit 10

%%sql 

-- Select the year results that appear on both tables

 

-- Select the year results that appear on both tables
SELECT year
FROM top_user_years_more_than_four_games
INTERSECT
SELECT year
FROM top_critic_years_more_than_four_games;

%%sql 

-- Select year and sum of games_sold, aliased as total_games_sold; order results by total_games_sold descending
-- Filter game_sales based on whether each year is in the list returned in the previous task

-- Select year and sum of games_sold, aliased as total_games_sold; order results by total_games_sold descending
-- Filter game_sales based on whether each year is in the list returned in the previous task
SELECT g.year, SUM(g.games_sold) AS total_games_sold
FROM game_sales g
WHERE g.year IN (SELECT year
FROM top_user_years_more_than_four_games
INTERSECT
SELECT year
FROM top_critic_years_more_than_four_games)
GROUP BY g.year
ORDER BY total_games_sold DESC;
